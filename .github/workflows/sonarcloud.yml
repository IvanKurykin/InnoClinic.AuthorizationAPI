name: .NET with SonarCloud

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Find solution file
      id: find-sln
      run: |
        # Ищем первый .sln файл в репозитории
        sln_path=$(find . -name "*.sln" -print -quit)
        if [ -z "$sln_path" ]; then
          echo "::error::No .sln file found in repository"
          exit 1
        fi
        echo "Found solution at: ${sln_path}"
        echo "sln_path=${sln_path}" >> $GITHUB_OUTPUT
        echo "project_dir=$(dirname "${sln_path}")" >> $GITHUB_OUTPUT

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      working-directory: ${{ steps.find-sln.outputs.project_dir }}
      run: dotnet restore ${{ steps.find-sln.outputs.sln_path }}

    - name: Build
      working-directory: ${{ steps.find-sln.outputs.project_dir }}
      run: dotnet build --no-restore --configuration Release

    - name: Test
      working-directory: ${{ steps.find-sln.outputs.project_dir }}
      run: dotnet test --no-build --verbosity normal --configuration Release

  analyze:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Sonar Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        projectBaseDir: ${{ needs.build.outputs.project_dir }}
        args: |
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.projectName=${{ secrets.SONAR_PROJECT_NAME }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.sources=.
          -Dsonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml"
          -Dsonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
          -Dsonar.coverage.exclusions="**/Program.cs,**/Extensions/*,**/Exceptions/**,**/Migrations/*,**/Entities/*,**/Enums/**/*,**/MappingConfigurations/*,**/ViewModels/**,**/Utilities/**"
          -Dsonar.exclusions="**/Migrations/*,**/Dockerfile"