name: .NET CI with SonarCloud

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Find and validate solution file
      id: find_solution
      run: |
        echo "Searching for solution files..."
        find . -name "*.sln" | while read -r sln; do
          echo "Found: $sln"
        done
        
        SOLUTION_PATH=$(find . -name "*.sln" -print -quit)
        
        if [ -z "$SOLUTION_PATH" ]; then
          echo "::error::No .sln file found in repository!"
          exit 1
        fi
        
        echo "Using solution: $SOLUTION_PATH"
        echo "solution_path=${SOLUTION_PATH}" >> $GITHUB_OUTPUT
        echo "project_dir=$(dirname "${SOLUTION_PATH}")" >> $GITHUB_OUTPUT

    - name: Debug solution info
      run: |
        echo "Solution path: ${{ steps.find_solution.outputs.solution_path }}"
        echo "Project dir: ${{ steps.find_solution.outputs.project_dir }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      working-directory: ${{ steps.find_solution.outputs.project_dir }}
      run: dotnet restore ${{ steps.find_solution.outputs.solution_path }}

    - name: Build solution
      working-directory: ${{ steps.find_solution.outputs.project_dir }}
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      working-directory: ${{ steps.find_solution.outputs.project_dir }}
      run: dotnet test --no-build --verbosity normal --configuration Release

  analyze:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        projectBaseDir: ${{ needs.build.outputs.project_dir }}
        args: |
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.projectName=${{ secrets.SONAR_PROJECT_NAME }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.sources=.
          -Dsonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
          -Dsonar.cs.vstest.reportsPaths="**/*.trx"
          -Dsonar.coverage.exclusions="**/Program.cs,**/Migrations/**"
          -Dsonar.exclusions="**/wwwroot/**"